#+TITLE: Doom Emacs Config
#+AUTHOR: scalychimp
#+DESCRIPTION: scalychimp's insidious doom emacs config.
#+STARTUP: overview
#+LAST_EDITED: <2023-05-21 Sun 09:14>

* Table of Contents :toc:
:PROPERTIES:
:VISIBILITY: all
:END:
- [[#dired][Dired]]
  - [[#keybindings][Keybindings]]
  - [[#dirvish-override][Dirvish override]]
- [[#doom][Doom]]
  - [[#user-setup][User setup]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#line-numbers][Line Numbers]]
  - [[#modeline][Modeline]]
- [[#org][Org]]
  - [[#heading-size][Heading Size]]
  - [[#ignore-headings][Ignore Headings]]
  - [[#edit-source-code-blocks][Edit source code blocks]]
  - [[#appear][Appear]]
  - [[#newlines][Newlines]]
  - [[#modern][Modern]]
  - [[#location][Location]]
  - [[#time-stamps][Time Stamps]]
  - [[#ellipsis][Ellipsis]]
- [[#evil][Evil]]
  - [[#snipe][Snipe]]
  - [[#cursor][Cursor]]
  - [[#word-definition][Word definition]]
- [[#screen][Screen]]
  - [[#fullscreen-on-startup][Fullscreen on startup]]
  - [[#transparency][Transparency]]
- [[#treemacs][Treemacs]]
- [[#dap][DAP]]
  - [[#test][test]]
- [[#yank-from-kill-ring][Yank from kill ring]]
- [[#company][Company]]
- [[#scroll-margin][Scroll margin]]
- [[#exercism][Exercism]]
- [[#prism][Prism]]
- [[#consult-imenu-project][Consult imenu project]]

* Dired
** Keybindings
Dired is nice, however doom has no keybindings for it by default, however ~SPC d~ is unused and makes keybindings both ergonomic and mnemonic.
#+begin_src elisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "dirvish in ranger style" "r" #'dirvish
       :desc "Dired jump to current" "j" #'dired-jump))
#+end_src

** Dirvish override
#+begin_src  elisp
(setq dirvish-override-dired-mode 't)
#+end_src

* Doom
** User setup
#+begin_src elisp
(setq user-full-name "scalychimp"
      user-mail-address "scalychimp@gmail.com")
#+end_src
** Font
#+begin_src elisp
(setq doom-font (font-spec :family "IBM Plex Mono" :size 20 :weight 'regular))
#+end_src

** Theme
#+begin_src elisp
(setq doom-theme 'doom-gruvbox)
(custom-set-faces!
        '(tree-sitter-hl-face:doc :inherit tree-sitter-hl-face:comment))
#+end_src

** Line Numbers
#+begin_src elisp
(setq display-line-numbers-type 't)
#+end_src

** Modeline
This adds a word count to the modeline when in various text modes like org and markdown.
#+begin_src elisp
(after! doom-modeline
  (setq!
   doom-modeline-enable-word-count t
   doom-modeline-continuous-word-count-modes
   '(markdown-mode gfm-mode org-mode text-mode)))
#+end_src

* Org
** Heading Size
Stolen from DistroTube's doom config, this block slightly increases the size of org headings, which helps make them stand out more.
#+begin_src elisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
#+end_src
** Ignore Headings
Don't export org headings for essays.
#+begin_src elisp
(after! ox
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+end_src

** Edit source code blocks
Keybind for editing src blocks, which is handy when your init.el is in a src block, I'm surprised doom doesn't have a bind for this by default frankly.
#+begin_src elisp
(after! org
  (map! :map org-mode-map
        :localleader "j" #'org-edit-src-code))
#+end_src

** Appear
This is the default configuration from the org appear github if I remember correctly.
#+begin_src elisp
(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks t
        org-hide-emphasis-markers t)
  (run-at-time nil nil #'org-appear--set-elements))

(add-hook! org-mode :append #'org-appear-mode)
#+end_src

** Newlines
Automatic newlines between heading so it feels less cramped.
#+begin_src elisp
(setq org-blank-before-new-entry '((heading . t) (plain-list-item . auto)))
#+end_src

** Modern
Activates org modern by adding it to an org-mode hook.
#+begin_src elisp
(add-hook! 'org-mode-hook #'global-org-modern-mode)
#+end_src

** Location
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src
** Time Stamps
This changes the time stamp pattern to work on org options.
#+begin_src elisp
(add-hook 'org-mode-hook (lambda ()
                             (setq-local time-stamp-active t
                                         time-stamp-start "#\\+LAST_EDITED:[ \t]*"
                                         time-stamp-end "$"
                                         time-stamp-format "<%Y-%02m-%02d %3a %02H:%02M>")
                             (add-hook 'before-save-hook 'time-stamp nil 'local)))
#+end_src

** Ellipsis
#+begin_src elisp
(setq org-ellipsis " â–¼ ")
(custom-set-faces!
   '(org-ellipsis :foreground unspecified))
#+end_src
* Evil
** Snipe
Makes evil snipe work across the whole line.
#+begin_src elisp
(after! evil-snipe
  (evil-snipe-override-mode 1)
  (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode))
#+end_src


** Cursor
This stops the cursor from moving when exiting insert mode, which I find to be quite annoying behaviour.
#+begin_src elisp
(setq evil-move-cursor-back nil)
#+end_src

** Word definition
This removes underscores from the evil word definition, (similar to vim) in c-like languages, swapping the definition of w and o, and makes movement keys also behave similar.
#+begin_src elisp
(add-hook 'c-mode-common-hook
          (lambda () (modify-syntax-entry ?_ "w"))
          (defalias 'forward-evil-word 'forward-evil-symbol))

(define-key evil-outer-text-objects-map "w" 'evil-a-symbol)
(define-key evil-inner-text-objects-map "w" 'evil-inner-symbol)
(define-key evil-outer-text-objects-map "o" 'evil-a-word)
(define-key evil-inner-text-objects-map "o" 'evil-inner-word)
#+end_src

* Screen
** Fullscreen on startup
Doesn't do much when using a window manager like i3, but it's handy for Windows.
#+begin_src elisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** Transparency
80 percent opacity when unfocused, handy to figure out what window is focused in i3 without borders.
#+begin_src elisp
(set-frame-parameter (selected-frame) 'alpha '(100 . 80))
#+end_src

* Treemacs
Decrease width because otherwise it takes up too much of the screen.
#+begin_src elisp
(setq treemacs-width 24)
#+end_src
* DAP
** test
#+begin_src elisp
;; (after! lsp-rust
;;    (require 'dap-cpptools))

;; (after! dap-cpptools
;;   (dap-register-debug-template "Rust::CppTools Run Configuration"
;;                                (list :type "cppdbg"
;;                                      :request "launch"
;;                                      :name "Rust::Run"
;;                                      :MIMode "gdb"
;;                                      :miDebuggerPath "rust-gdb"
;;                                      :environment []
;;                                      :program "${workspaceFolder}/target/debug/"
;;                                      :cwd "${workspaceFolder}"
;;                                      :console "external"
;;                                      :dap-compilation "cargo build"
;;                                      :dap-compilation-dir "${workspaceFolder}")))

;; (after! dap-mode
;;   (dap-auto-configure-mode 1))

#+end_src

* Yank from kill ring
Brings that back from normal emacs mode because the kill ring is just plain better than registers.
#+begin_src elisp
(map! :desc "yank from kill ring" "M-y" #'yank-from-kill-ring)
#+end_src

* Company
Removes completion delay.
#+begin_src elisp
(setq company-idle-delay 0)
#+end_src

* Scroll margin
#+begin_src elisp
(setq! scroll-margin 8)
#+end_src

* Exercism
#+begin_src elisp
(use-package! exercism)
(map! :leader (:prefix-map ("e" . "Exercism")
      :desc "Exercism tansient menu" "e" #'exercism
      :desc "Exercism submit and open" "s" #'exercism-submit-then-open-in-browser))
#+end_src
* Prism
#+begin_src emacs-lisp
(after! (prism doom-themes)
    (setq prism-parens t)
    (prism-set-colors
      :lightens '(-5)
      :desaturations '(5)
      :colors (-map #'doom-color '(violet blue green yellow orange red))))

(map! :leader (:prefix-map ("t" . "toggle") :desc "Prism mode" "p" (cmd! (prism-mode 'toggle) (highlight-indent-guides-mode 'toggle))))
#+end_src

* Consult imenu project
 #+begin_src elisp
(map! :leader :desc "imenu search project" "z" #'consult-imenu-multi)
 #+end_src
